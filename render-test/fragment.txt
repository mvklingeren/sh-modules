#version 300 es precision highp float;  in vec3 vNormal; in vec3 vPosition; in vec2 vUv;  uniform vec3 uLightPosition; uniform vec3 uLightColor; uniform vec3 uObjectColor; uniform float uTime;  out vec4 fragColor;  void main() {  vec3 normal = normalize(vNormal);  vec3 lightDir = normalize(uLightPosition - vPosition);    // Animate color based on time  vec3 objColor = uObjectColor * (0.8 + 0.2 * sin(uTime + vPosition.y));    vec3 ambient = vec3(0.3) * objColor;  float diff = max(dot(normal, lightDir), 0.0);  vec3 diffuse = diff * uLightColor * objColor;    vec3 viewDir = normalize(-vPosition);  vec3 reflectDir = reflect(-lightDir, normal);  float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);  vec3 specular = vec3(0.5) * spec * uLightColor;    // Add pattern based on UV coordinates  float pattern = sin(vUv.x * 10.0 + uTime) * sin(vUv.y * 10.0 + uTime) * 0.5 + 0.5;    fragColor = vec4(ambient + diffuse + specular + pattern * 0.2, 1.0); }